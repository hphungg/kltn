import streamlit as st
import os
import json

from assistant.assistant import Assistant
from core.sg_knowledge_query import knowledge_query
from core.sg_question_query import question_query

from database.history_manager import load_chat_history, save_chat_history
from database.knowledge_db import Neo4jConnector
from database.question_db import MongoDBConnector

USER_DATA_FILE = st.secrets["USER_DATA_FILE"] + "_1.json"

st.set_page_config(page_title="L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng", page_icon="ü§ñ")

def new_user_data():
    return {
        "name": "",
        "coding_strength": "",
        "coding_level": "C∆° b·∫£n",
        "coding_language": "C++",
        "knowledge_list": [],
        "solved_quest_tag": [],
        "chat_history": []
    }
    
@st.cache_resource
def load_assistant(user_info, user_data_file):
    return Assistant(user_info, user_data_file)

@st.cache_resource
def load_graphdb():
    return Neo4jConnector()

@st.cache_resource
def load_mongo():
    return MongoDBConnector()  

@st.cache_resource
def load_user_data():
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    return new_user_data()

user_info = load_user_data()
graph_db = load_graphdb()
mongo_db = load_mongo()
assistant = load_assistant(user_info, USER_DATA_FILE)

if "messages" not in st.session_state:
    st.session_state.messages = load_chat_history("2")

for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

knowledge_suggestions = knowledge_query(assistant.get_knowledge_list(), graph_db)
question_suggestions = question_query(assistant.get_knowledge_list(), mongo_db)

def handle_knowledge_suggestion(suggestion):
    my_prompt = f"T√¥i mu·ªën t√¨m hi·ªÉu v·ªÅ {suggestion.lower()}"
    st.session_state.messages.append({"role": "user", "content": my_prompt})
    full_response = assistant.generate_response(my_prompt, user_info)
    st.session_state.messages.append({"role": "assistant", "content": full_response})
    save_chat_history(st.session_state.messages, "2")

def handle_question_suggestion(question):
    quest_content = f"Vi·∫øt ch∆∞∆°ng tr√¨nh gi·∫£i b√†i t·∫≠p sau ƒë√¢y:\n### {question["title"]}\n\n{question["content"]}"
    st.chat_message("assistant").markdown(quest_content)
    st.session_state.messages.append({"role": "assistant", "content": quest_content})

if (("messages" not in st.session_state) or (len(st.session_state.messages) == 0)):
    st.header("ü§ñ L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng")
    st.markdown(
        "ƒê√¢y l√† tr·ª£ l√Ω h·ªó tr·ª£ h·ªçc t·∫≠p m√¥n L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng. "
        "H√£y ƒë∆∞a ra m·ªôt y√™u c·∫ßu ho·∫∑c l·ª±a ch·ªçn c√°c g·ª£i √Ω h·ªçc t·∫≠p ƒë·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán."
    )
    st.subheader("B·∫Øt ƒë·∫ßu b·∫±ng c√°ch t√¨m hi·ªÉu m·ªôt trong nh·ªØng ch·ªß ƒë·ªÅ sau:")
    for i, suggestion in enumerate(knowledge_suggestions):
        st.button(suggestion, key=f"start_ks_{i}", on_click=lambda s=suggestion: handle_knowledge_suggestion(s))
    st.subheader("Ho·∫∑c c√≥ th·ªÉ luy·ªán t·∫≠p v·ªõi m·ªôt trong c√°c b√†i t·∫≠p sau:")
    for i, question in enumerate(question_suggestions):
        st.button(question["title"], key=f"start_qs_{i}", on_click=lambda s=suggestion: handle_question_suggestion(s))

# Sidebar
st.sidebar.header("G·ª£i √Ω ch·ªß ƒë·ªÅ h·ªçc ti·∫øp theo")
for i, suggestion in enumerate(knowledge_suggestions):
    st.sidebar.button(suggestion, key=f"side_ks_{i}", on_click=lambda s=suggestion: handle_knowledge_suggestion(s))
st.sidebar.header("G·ª£i √Ω b√†i t·∫≠p luy·ªán t·∫≠p")
for i, question in enumerate(question_suggestions):
    st.sidebar.button(question["title"], key=f"side_qs_{i}", on_click=lambda s=suggestion: handle_question_suggestion(s))

st.sidebar.header("Th√¥ng tin c√° nh√¢n")
st.sidebar.markdown("B·∫°n c√≥ th·ªÉ cung c·∫•p th√¥ng tin c√° nh√¢n c·ªßa b·∫°n ƒë·ªÉ tr·ª£ l√Ω c√≥ th·ªÉ cung c·∫•p c√¢u tr·∫£ l·ªùi ph√π h·ª£p v√† ch√≠nh x√°c h∆°n.")

user_info["name"] = st.sidebar.text_input("T√™n c·ªßa b·∫°n:", user_info["name"])
user_info["coding_language"] = st.sidebar.selectbox("Ng√¥n ng·ªØ l·∫≠p tr√¨nh:", ["C++", "Python", "Java", "JavaScript"], index=["C++", "Python", "Java", "JavaScript"].index(user_info["coding_language"]))
user_info["coding_level"] = st.sidebar.selectbox("M·ª©c ƒë·ªô c·ªßa c√¢u tr·∫£ l·ªùi t·ª´ tr·ª£ l√Ω:", ["C∆° b·∫£n", "N√¢ng cao", "Chuy√™n nghi·ªáp"], index=["C∆° b·∫£n", "N√¢ng cao", "Chuy√™n nghi·ªáp"].index(user_info["coding_level"]))

# X·ª≠ l√Ω x√≥a d·ªØ li·ªáu tr√≤ chuy·ªán
def clear_history():
    st.session_state.messages = []
    assistant.clear_chat_history()
    save_chat_history([], "2")

def clear_all_history():
    st.session_state.messages = []
    assistant.clear_chat_history()
    user_info = new_user_data()
    assistant.update_user_info(user_info)
    save_chat_history([], "2")

with st.sidebar:
    st.button("X√≥a d·ªØ li·ªáu tr√≤ chuy·ªán hi·ªán t·∫°i", on_click=clear_history)
    st.button("X√≥a to√†n b·ªô d·ªØ li·ªáu", on_click=clear_all_history)

# Ng∆∞·ªùi d√πng nh·∫≠p c√¢u h·ªèi
if prompt := st.chat_input("H·ªèi m·ªôt c√¢u h·ªèi n√†o ƒë√≥"):
    with st.chat_message("user"):
        st.markdown(prompt)
    st.session_state.messages.append({"role": "user", "content": prompt})

    with st.chat_message("assistant"):
        message_placeholder = st.empty()
        full_response = assistant.generate_response(prompt, user_info)
        message_placeholder.markdown(full_response)
    st.session_state.messages.append({"role": "assistant", "content": full_response})
    save_chat_history(st.session_state.messages, "2")
    


