import streamlit as st
from assistant.assistant import Assistant
from core.study_suggestions import query_suggestions
from core.ques_suggestions import query_questions
from database.cache_manager import load_chat_history, save_chat_history
from database.user_database import load_user_data, save_user_data

st.set_page_config(page_title="Nh·∫≠p m√¥n l·∫≠p tr√¨nh", page_icon="ü§ñ")

@st.cache_resource
def load_assistant(user_info):
    return Assistant(user_info)

user_info = load_user_data()
assistant = load_assistant(user_info)

if "messages" not in st.session_state:
    st.session_state["messages"] = load_chat_history()

if "selected_suggestion" not in st.session_state:
    st.session_state["selected_suggestion"] = None

if "selected_quest" not in st.session_state:
    st.session_state["selected_quest"] = None

for msg in st.session_state.messages:
    st.chat_message(msg["role"]).write(msg["content"])


def handle_assistant_response(user_input):
    st.chat_message("user").write(user_input)
    st.session_state.messages.append({"role": "user", "content": user_input})
    response = assistant.generate_response(user_input)
    st.chat_message("assistant").write(response)
    st.session_state.messages.append({"role": "assistant", "content": response})
    
    save_chat_history(st.session_state.messages)
    st.session_state["selected_suggestion"] = None
    st.rerun()

suggestions = query_suggestions(assistant.get_knowledge_list())
ques_suggestions = query_questions(assistant.get_knowledge_list())

if len(st.session_state.messages) == 0:
    st.header("ü§ñ Nh·∫≠p m√¥n l·∫≠p tr√¨nh")
    st.markdown(
        "ƒê√¢y l√† tr·ª£ l√Ω h·ªó tr·ª£ h·ªçc t·∫≠p m√¥n Nh·∫≠p m√¥n l·∫≠p tr√¨nh. "
        "H√£y ƒë∆∞a ra m·ªôt y√™u c·∫ßu ho·∫∑c l·ª±a ch·ªçn c√°c g·ª£i √Ω h·ªçc t·∫≠p ƒë·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán."
    )
    st.subheader("B·∫Øt ƒë·∫ßu b·∫±ng c√°ch t√¨m hi·ªÉu m·ªôt trong nh·ªØng ch·ªß ƒë·ªÅ sau:")
    for suggestion in suggestions:
        if st.button(suggestion):
            st.session_state["selected_suggestion"] = suggestion
    st.subheader("Ho·∫∑c c√≥ th·ªÉ luy·ªán t·∫≠p v·ªõi m·ªôt trong c√°c b√†i t·∫≠p sau:")
    for question in ques_suggestions:
        if st.button(question["title"]):
            st.session_state["selected_quest"] = question

# Sidebar

st.sidebar.header("G·ª£i √Ω ch·ªß ƒë·ªÅ h·ªçc ti·∫øp theo")
for suggestion in suggestions:
    if st.sidebar.button(suggestion, key=suggestion):
        st.session_state["selected_suggestion"] = suggestion

if st.session_state["selected_suggestion"] is not None:
    my_prompt = f"T√¥i mu·ªën t√¨m hi·ªÉu v·ªÅ {st.session_state["selected_suggestion"].lower()}"
    handle_assistant_response(my_prompt)

if st.session_state["selected_quest"] is not None:
    quest_content = f"## {st.session_state["selected_quest"]["title"]}\n\n{st.session_state["selected_quest"]["content"]}"
    st.chat_message("assistant").write(quest_content)
    st.session_state["selected_quest"] = None


st.sidebar.header("Th√¥ng tin c√° nh√¢n")
st.sidebar.markdown("B·∫°n c√≥ th·ªÉ cung c·∫•p th√¥ng tin c√° nh√¢n c·ªßa b·∫°n ƒë·ªÉ tr·ª£ l√Ω c√≥ th·ªÉ cung c·∫•p c√¢u tr·∫£ l·ªùi ph√π h·ª£p v√† ch√≠nh x√°c h∆°n.")

updated_name = st.sidebar.text_input("T√™n c·ªßa b·∫°n:", user_info["name"])
updated_coding_language = st.sidebar.selectbox(
    "Ng√¥n ng·ªØ l·∫≠p tr√¨nh:", 
    ["C++", "Python", "Java", "JavaScript"], 
    index=["C++", "Python", "Java", "JavaScript"].index(user_info["coding_language"])
)
updated_coding_level = st.sidebar.selectbox(
    "M·ª©c ƒë·ªô c·ªßa c√¢u tr·∫£ l·ªùi t·ª´ tr·ª£ l√Ω:", 
    ["C∆° b·∫£n", "N√¢ng cao", "Chuy√™n nghi·ªáp"], 
    index=["C∆° b·∫£n", "N√¢ng cao", "Chuy√™n nghi·ªáp"].index(user_info["coding_level"])
)

# X·ª≠ l√Ω x√≥a d·ªØ li·ªáu tr√≤ chuy·ªán
with st.sidebar:
    if st.button("X√≥a d·ªØ li·ªáu tr√≤ chuy·ªán hi·ªán t·∫°i"):
        st.session_state.messages = []
        assistant.clear_chat_history()
        save_chat_history([])  # L∆∞u l·∫°i l·ªãch s·ª≠ tr·ªëng
        st.rerun()

# Ki·ªÉm tra n·∫øu th√¥ng tin ng∆∞·ªùi d√πng thay ƒë·ªïi v√† c·∫≠p nh·∫≠t
if (
    updated_name != user_info["name"] or
    updated_coding_level != user_info["coding_level"] or
    updated_coding_language != user_info["coding_language"]
):
    user_info["name"] = updated_name
    user_info["coding_level"] = updated_coding_level
    user_info["coding_language"] = updated_coding_language
    assistant.update_user_info(user_info)

# X·ª≠ l√Ω ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng qua tr∆∞·ªùng nh·∫≠p li·ªáu chat
if prompt := st.chat_input("H·ªèi m·ªôt c√¢u h·ªèi n√†o ƒë√≥"):
    handle_assistant_response(prompt)
